import asyncio
import json

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from loguru import logger

from app.database.requests import Database
from app.FSM.fsm import FSMSettings, FSMModel, FSMUser
from aiogram.fsm.state import default_state
from app.keyboards.inline_keyboards import (
    get_settings_keyboard,
    get_hide_keyboard,
    get_choose_model_keyboard,
    get_approve_gpt4o_keyboard,
    get_approve_llama3_keyboard,
    get_approve_scenary_keyboard,
    get_approve_keyboard
)

from app.keyboards.reply_keyboards import (
    get_menu_keyboard
)

from app.service.helpers import get_gpt_response, get_llama_response, get_scenary_response

from aiogram.types.reply_keyboard_markup import ReplyKeyboardMarkup

from app.lexicon.bot_lexicon import LEXICON_RU, LEXICON_EN

from aiogram.types import FSInputFile

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ.
    """
    user_id = message.from_user.id
    username = message.from_user.username or ""
    fullname = message.from_user.full_name or ""

    user, created = await Database.add_user(user_id=user_id, username=username, fullname=fullname)

    settings = await Database.get_user_settings(user_id)

    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    if not created:
        await state.set_state(FSMUser.approving_agreement)
        welcome_text_ru = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{fullname}</b>!\n\n" \
                          f"–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è ‚òùÔ∏è"
        welcome_text_en = f"Welcome, <b>{fullname}</b>!\n\n" \
                          f"Before using the bot, please familiarize yourself with the privacy policy and accept the user agreement ‚òùÔ∏è"

        # –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É PDF-—Ñ–∞–π–ª—É
        pdf_path = "app\database\–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.pdf"

        ## –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        pdf_file = FSInputFile(pdf_path)

        await message.answer_document(pdf_file, caption="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–Ω–∏–µ üìÑ")
        if cur_lang == 'ru':
            await message.answer(text=welcome_text_ru, reply_markup=await get_approve_keyboard())
        else:
            await message.answer(text=welcome_text_en, reply_markup=await get_approve_keyboard())

        return

    else:
        welcome_text_ru = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{fullname}</b>!"
        welcome_text_en = f"Welcome, <b>{fullname}</b>!"

    if cur_lang == 'ru':
        await message.answer(LEXICON_RU['start'].format(hello=welcome_text_ru), reply_markup=await get_menu_keyboard(lang='ru'))
    else:
        await message.answer(LEXICON_EN['start'].format(hello=welcome_text_en), reply_markup=await get_menu_keyboard(lang='en'))

    logger.info(f"User {username} (ID: {user_id}) started the bot.")


@router.callback_query(F.data == 'approve', StateFilter(FSMUser.approving_agreement))
async def callback_approve(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
    """
    user_id = callback.from_user.id
    username = callback.from_user.username or ""
    fullname = callback.from_user.full_name or ""

    settings = await Database.get_user_settings(user_id)

    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    await state.set_state(default_state)

    welcome_text_ru = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{fullname}</b>!"
    welcome_text_en = f"Welcome, <b>{fullname}</b>!"

    await callback.message.delete()
    if cur_lang == 'ru':
        await callback.message.answer(LEXICON_RU['start'].format(hello=welcome_text_ru), reply_markup=await get_menu_keyboard(lang='ru'))
    else:
        await callback.message.answer(LEXICON_EN['start'].format(hello=welcome_text_en), reply_markup=await get_menu_keyboard(lang='en'))

    await callback.answer()

@router.message(F.text == "ü§ñ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
@router.message(F.text == "ü§ñ Change Model")
async def change_model(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat –∏ —Å–æ–æ–±—â–µ–Ω–∏—è "ü§ñ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å".
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    await state.set_state(FSMModel.choosing_model)

    settings = await Database.get_user_settings(user_id=user_id)
    gpt4o = settings['gpt4o_access']
    scenary = settings['scenary_access']
    llama = settings['llama_access']

    if cur_lang == 'ru':
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞.\n\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏:"
    else:
        text = "Choose a chat model.\n\nYou have access to the folowing models:"

    await message.answer(text, reply_markup=await get_choose_model_keyboard(gpt4o=gpt4o, scenary=scenary, llama=llama, lang=cur_lang))
    logger.info(f"User (ID: {user_id}) is choosing a model with ChatGPT.")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@router.message(F.text == "‚öôÔ∏è Settings")
async def cmd_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)

    if not settings:
        if settings.get('language') == 'en':
            await message.answer("Your profile was not found. Please use /start to register.")
        else:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    cur_lang = settings.get('language', 'ru')

    if cur_lang == 'ru':
        settings_text = "<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
    else:
        settings_text = "<b>Your current settings:</b>\n\n"

    is_admin = (await Database.get_user(user_id=user_id)).is_admin

    keyboard = await get_settings_keyboard(lang=cur_lang, is_admin=is_admin)

    await message.answer(settings_text, reply_markup=keyboard)
    logger.info(f"User (ID: {user_id}) requested settings.")

@router.callback_query(F.data == 'change_language')
async def change_language(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    await callback.message.delete()

    await state.set_state(FSMSettings.waiting_for_language)
    is_admin = (await Database.get_user(user_id=user_id)).is_admin

    if cur_lang == 'ru':
        await Database.set_user_setting(user_id=user_id, setting='language', value='en')
        new_lang = 'en'
        response_text = "Language changed to EN."
        await callback.message.answer("<b>Your current settings:</b>\n\n", reply_markup=await get_settings_keyboard(lang='en', is_admin=is_admin))
        await callback.message.answer("Settings have been changed", reply_markup=await get_menu_keyboard(lang='en'))
    else:
        await Database.set_user_setting(user_id=user_id, setting='language', value='ru')
        new_lang = 'ru'
        response_text = "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ RU."
        await callback.message.answer("<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n", reply_markup=await get_settings_keyboard(lang='ru', is_admin=is_admin))
        await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=await get_menu_keyboard(lang='ru'))

    await callback.answer(text=response_text)
    logger.info(f"User (ID: {user_id}) changed language to {new_lang.upper()}.")

@router.callback_query(F.data == "hide")
async def callback_hide(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)

    if state.get_state() not in (FSMModel.waiting_for_message_gpt4o, FSMModel.waiting_for_message_llama3, FSMModel.waiting_for_message_scenary):
        await state.clear()

    await callback.message.delete()

    logger.info(f"User (ID: {user_id}) hided the action.")

    await callback.answer()

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/cancel".
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    cur_lang = (await Database.get_user_settings(user_id=message.from_user.id))['language']
    await state.clear()

    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ" if cur_lang == 'ru' else "Action cancelled", reply_markup=await get_menu_keyboard(lang=cur_lang))


@router.callback_query(F.data.startswith("choice_"), StateFilter(FSMModel.choosing_model))
async def callback_choose_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    model = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    if model == "gpt4o":
        if cur_lang == 'ru':
            text = LEXICON_RU['gpt4o_choice']
        else:
            text = LEXICON_EN['gpt4o_choice']
        keyboard = await get_approve_gpt4o_keyboard(lang=cur_lang)
    elif model == "llama3":
        if cur_lang == 'ru':
            text = LEXICON_RU['llama3_choice']
        else:
            text = LEXICON_EN['llama3_choice']
        keyboard = await get_approve_llama3_keyboard(lang=cur_lang)
    elif model == "scenary":
        if cur_lang == 'ru':
            text = LEXICON_RU['scenary_choice']
        else:
            text = LEXICON_EN['scenary_choice']
        keyboard = await get_approve_scenary_keyboard(lang=cur_lang)
    else:
        if cur_lang == 'ru':
            text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å."
        else:
            text = "Unknown model."
        keyboard = InlineKeyboardMarkup()

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
    logger.info(f"User (ID: {user_id}) is approving model {model}.")

@router.callback_query(F.data.startswith("approve"), StateFilter(FSMModel.choosing_model))
async def callback_approve_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    model = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    success = await Database.set_user_setting(user_id=user_id, setting="chat_model", value=model)
    if success:
        if model == "gpt4o":
            if cur_lang == 'ru':
                text = "–ú–æ–¥–µ–ª—å GPT4o —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞."
            else:
                text = "GPT4o model has been successfully selected."
        elif model == "llama3":
            if cur_lang == 'ru':
                text = "–ú–æ–¥–µ–ª—å Llama3 —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞."
            else:
                text = "Llama3 model has been successfully selected."
        elif model == "scenary":
            if cur_lang == 'ru':
                text = "–†–µ–∂–∏–º ¬´—Å—Ü–µ–Ω–∞—Ä–Ω—ã–π¬ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω."
            else:
                text = "Scenary mode has been successfully selected."
        else:
            if cur_lang == 'ru':
                text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å."
            else:
                text = "Unknown model."

        await callback.message.edit_text(text)
        logger.info(f"User (ID: {user_id}) changed chat model to {model}.")
    else:
        if cur_lang == 'ru':
            text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            text = "Failed to change the model. Please try again later."
        await callback.message.edit_text(text)
        logger.error(f"Failed to change chat model for user (ID: {user_id}).")

    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "refuse")
async def callback_refuse_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    await state.clear()

    if cur_lang == 'ru':
        text = "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω."
    else:
        text = "Model selection canceled."

    await callback.message.edit_text(text)
    await callback.answer()
    logger.info(f"User (ID: {user_id}) refused to choose a model.")

@router.message(Command("chat"))
@router.message(F.text == "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç")
@router.message(F.text == "üó®Ô∏è Start Chat")
async def cmd_chat_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç" –∏ –∫–æ–º–∞–Ω–¥—ã "/chat".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatGPT.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    model = await Database.get_user_model(user_id=user_id)
    token_balance = settings['token_balance']

    if model == "gpt4o":
        if token_balance < 100:
            if cur_lang == 'ru':
                await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ GPT4o.\n\n<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ @TheMorz3.</b>" \
                                f"\n\n <i>/price ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</i>")
            else:
                await message.answer(f"You don't have enough tokens to use model GPT4o. Please top up your token balance to continue. DM @TheMorze in order to do it.")
            return
        full_model = "GPT4o"
        await state.set_state(FSMModel.waiting_for_message_gpt4o)
    elif model == "llama3":
        if token_balance < 150:
            if cur_lang == 'ru':
                await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ LLama3.\n\n<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ @TheMorz3.</b>" \
                                f"\n\n <i>/price ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</i>")
            else:
                await message.answer(f"You don't have enough tokens to use model LLama3. Please top up your token balance to continue. DM @TheMorze in order to do it.")
            return
        full_model = "Llama3"
        await state.set_state(FSMModel.waiting_for_message_llama3)
    elif model == "scenary":
        if token_balance < 150:
            if cur_lang == 'ru':
                await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ LLama3.\n\n<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ @TheMorz3.</b>" \
                                f"\n\n <i>/price ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</i>")
            else:
                await message.answer(f"You don't have enough tokens to use model LLama3. Please top up your token balance to continue. DM @TheMorze in order to do it.")
            return
        full_model = "Scenary"
        await state.set_state(FSMModel.waiting_for_message_scenary)
    else:
        # Default model
        full_model = "GPT4o"
        await state.set_state(FSMModel.waiting_for_message_gpt4o)

    if cur_lang == 'ru':
        prompt = f"–í—ã —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ: {full_model}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n<i>–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ /cancel</i>"
    else:
        prompt = f"You are now using: {full_model}\n\nEnter your message:\n\n<i>In order to quit the dialogue, click /cancel</i>"

    await message.answer(prompt, reply_markup=await get_hide_keyboard(lang=cur_lang))

    logger.info(f"User (ID: {user_id}) is starting a chat with ChatGPT.")

@router.message(StateFilter(FSMModel.waiting_for_message_gpt4o))
async def process_gpt4o_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—â–µ–Ω–∏—è —Å GPT4o.
    """

    user_message = message.text
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language


    token_balance = settings['token_balance']

    if token_balance < 100:
        if cur_lang == 'ru':
            await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ GPT4o.\n\n<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ @TheMorz3.</b>" \
                                f"\n\n <i>/price ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</i>")
        else:
            await message.answer(f"You don't have enough tokens to use model GPT4o. Please top up your token balance to continue. DM @TheMorze in order to do it.")
        return

    logger.info(f"Message received from user (ID: {user_id}): {user_message}")

    await message.bot.send_chat_action(chat_id=message.chat.id, action='typing')

    gpt_response = await get_gpt_response(user_message)

    await Database.set_user_setting(user_id=user_id, setting="token_balance", value=(await Database.get_user_settings(user_id=user_id))['token_balance'] - 100)

    await message.answer(gpt_response)
    logger.info(f"Response sent to user (ID: {user_id}): {gpt_response}")


@router.message(StateFilter(FSMModel.waiting_for_message_llama3))
async def process_llama3_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—â–µ–Ω–∏—è —Å Llama3.
    """
    user_message = message.text
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    token_balance = settings['token_balance']
    if token_balance < 150:
        if cur_lang == 'ru':
            await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ LLama3.\n\n<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ @TheMorz3.</b>" \
                                f"\n\n <i>/price ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</i>")
        else:
            await message.answer(f"You don't have enough tokens to use model LLama3. Please top up your token balance to continue. DM @TheMorze in order to do it.")
        return

    logger.info(f"Message received from user (ID: {user_id}): {user_message}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Llama API
    # –ü—Ä–∏–º–µ—Ä:
    # llama_response = await get_llama_response(user_message)
    await message.bot.send_chat_action(chat_id=message.chat.id, action='typing')

    llama_response = await get_llama_response(user_message)

    await Database.set_user_setting(user_id=user_id, setting="token_balance", value=(await Database.get_user_settings(user_id=user_id))['token_balance'] - 150)
    await message.answer(llama_response)
    logger.info(f"Response sent to user (ID: {user_id}): {llama_response}")
    
@router.message(StateFilter(FSMModel.waiting_for_message_scenary))
async def process_scenary_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—â–µ–Ω–∏—è —Å Scenary.
    """
    user_message = message.text
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    token_balance = settings['token_balance']
    if token_balance < 50:
        if cur_lang == 'ru':
            await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ Scenary.\n\n<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ @TheMorz3.</b>"
                                 f"\n\n <i>/price ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</i>")
        else:
            await message.answer(f"You don't have enough tokens to use model Scenary. Please top up your token balance to continue. DM @TheMorze in order to do it.")
        return

    logger.info(f"Message received from user (ID: {user_id}): {user_message}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Llama API
    # –ü—Ä–∏–º–µ—Ä:
    # llama_response = await get_llama_response(user_message)
    await message.bot.send_chat_action(chat_id=message.chat.id, action='typing')

    scenary_response = await get_scenary_response(user_message)

    await Database.set_user_setting(user_id=user_id, setting="token_balance", value=(await Database.get_user_settings(user_id=user_id))['token_balance'] - 50)
    await message.answer(scenary_response)
    logger.info(f"Response sent to user (ID: {user_id}): {scenary_response}")



@router.message(StateFilter(FSMModel.scenary_processing_message))
async def fallback_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    if cur_lang == 'ru':
        fallback_text = "–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å :("
    else:
        fallback_text = "I don't know how to respond to that :("

    await message.answer(fallback_text)
    logger.error(f"Unexpected state while processing a message from user (ID: {user_id}).")
    await state.clear()

@router.message(F.text == 'üÜò –ü–æ–º–æ—â—å')
@router.message(F.text == 'üÜò Help')
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üÜò –ü–æ–º–æ—â—å" –∏ –∫–æ–º–∞–Ω–¥—ã "/help".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é.
    """

    await message.answer("<b><i>==–ü–û–ú–û–©–¨==</i></b>\n\n" \
                         "üó® <b><i>–ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç</i></b> ‚Äî <i>–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏</i>\n" \
                         "ü§ñ <b><i>–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å</i></b> ‚Äî <i>–≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö</i>\n" \
                         "‚öôÔ∏è <b><i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</i></b> ‚Äî <i>–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫</i> –∏–ª–∏ <i>–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–∞–≤)</i>\n" \
                         "üìö <b><i>–û –Ω–∞—Å</i></b> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n" \
                         "üìú <b><i>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç</i></b> ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–∫–µ–Ω—ã")


@router.message(F.text == 'üìö –û –Ω–∞—Å')
@router.message(F.text == 'üìö About us')
async def about_us(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üìö –û –Ω–∞—Å" –∏ –∫–æ–º–∞–Ω–¥—ã "/about".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ.
    """
    await message.answer("<b><i>==–û –ù–ê–°==</i></b>\n\n–ú—ã –∫–æ–º–∞–Ω–¥–∞ –∏–∑ —Ç—Ä–µ—Ö –º–æ–ª–æ–¥—ã—Ö —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤,"
                        "—Ä–µ—à–∏–≤—à–∏—Ö —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å–∞–º–æ–µ –Ω—É–∂–Ω–æ–µ "
                        "–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ / –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –ú–ò–°–ò–° –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ.\n\n"
                        "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è"
                        "—Ç–æ–ª—å–∫–æ –æ—Ç –ü–∞–≤–ª–∞ –î–º–∏—Ç—Ä–∏–µ–≤–∏—á–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª—Å - –±–∞–Ω ‚ò†Ô∏è")

@router.message(F.text == 'üìú –ü—Ä–∞–π—Å-–ª–∏—Å—Ç')
@router.message(F.text == 'üìú Price List')
@router.message(Command('price'))
async def price_list(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç" –∏ –∫–æ–º–∞–Ω–¥—ã "/pricelist".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º.
    """
    cur_lang = (await Database.get_user_settings(message.from_user.id))['language']

    if cur_lang == 'ru':
        await message.answer('''<b>üåü –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ —É—Å–ª—É–≥–∏ —á–∞—Ç-–±–æ—Ç–∞ üåü\n\n\n</b>üîπ 10 —Ç—ã—Å. —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 50 —Ä—É–±–ª–µ–π\n
üîπ 100 —Ç—ã—Å. —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 300 —Ä—É–±–ª–µ–π\n
üîπ 1 –º–ª–Ω. —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî 2500 —Ä—É–±–ª–µ–π\n''')

    else:
        await message.answer('''<b>üåü Chat bot service price list üåü\n\n</b>

üîπ 10,000 tokens ‚Äî 50 rubles\n

üîπ 100,000 tokens ‚Äî 300 rubles\n

üîπ 1,000,000 tokens ‚Äî 2500 rubles\n''')




























































@router.message(F.text.lower().contains('—Ö–æ–Ω–µ—Ä'))
async def process_some(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '—Ö–æ–Ω–µ—Ä'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.
    """
    await message.answer("<b><i>==–•–£–ê–í–ï–ô==  :)</i></b>")
