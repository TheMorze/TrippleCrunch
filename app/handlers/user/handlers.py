import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from loguru import logger

from app.database.requests import Database
from app.FSM.fsm import FSMSettings, FSMChatGPT
from aiogram.fsm.state import default_state
from app.keyboards.inline_keyboards import (
    get_settings_keyboard,
    get_change_language_keyboard,
    get_change_theme_keyboard,
    get_cancel_keyboard,
    get_choose_model_keyboard
)

from app.keyboards.reply_keyboards import (
    get_menu_keyboard
)


router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ.
    """
    user_id = message.from_user.id
    username = message.from_user.username or ""
    fullname = message.from_user.full_name or ""

    user, created = await Database.add_user(user_id=user_id, username=username, fullname=fullname)
    if not created:
        welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {fullname}!\n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
    else:
        welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {fullname}!\n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

    await message.answer(welcome_text, reply_markup=await get_menu_keyboard())
    logger.info(f"User {username} (ID: {user_id}) started the bot.")


@router.message(F.text == "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç")
async def msg_chat(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç".
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞.
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞:", reply_markup=await get_cancel_keyboard())


@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)

    if not settings:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    notifications_status = '–í–∫–ª—é—á–µ–Ω—ã' if settings['notifications_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'
    settings_text = (
        f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–Ø–∑—ã–∫: {settings['language']}\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}\n"
        f"–¢–µ–º–∞: {settings['theme']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ inline_keyboards.py —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    keyboard = await get_settings_keyboard(notifications_enabled=settings['notifications_enabled'])

    await message.answer(settings_text, reply_markup=keyboard)
    logger.info(f"User (ID: {user_id}) requested settings.")

@router.callback_query(F.data == "change_language")
async def callback_change_language(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.set_state(FSMSettings.waiting_for_language)
    keyboard = await get_change_language_keyboard()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("set_language_"), StateFilter(FSMSettings.waiting_for_language))
async def callback_set_language(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.
    """
    language = callback.data.split("_")[-1]
    user_id = callback.from_user.id

    success = await Database.set_user_setting(user_id=user_id, setting="language", value=language)
    if success:
        language_full = "–†—É—Å—Å–∫–∏–π" if language == "ru" else "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
        await callback.message.edit_text(f"–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language_full}.")
        logger.info(f"User (ID: {user_id}) changed language to {language}.")
    else:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to change language for user (ID: {user_id}).")

    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "change_theme")
async def callback_change_theme(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.set_state(FSMSettings.waiting_for_theme)
    keyboard = await get_change_theme_keyboard()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("set_theme_"), StateFilter(FSMSettings.waiting_for_theme))
async def callback_set_theme(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã.
    """
    theme = callback.data.split("_")[-1]
    user_id = callback.from_user.id

    success = await Database.set_user_setting(user_id=user_id, setting="theme", value=theme)
    if success:
        theme_full = "–°–≤–µ—Ç–ª–∞—è" if theme == "light" else "–¢—ë–º–Ω–∞—è"
        await callback.message.edit_text(f"–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {theme_full}.")
        logger.info(f"User (ID: {user_id}) changed theme to {theme}.")
    else:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to change theme for user (ID: {user_id}).")

    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "toggle_notifications")
async def callback_toggle_notifications(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)

    if not settings:
        await callback.message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await callback.answer()
        return

    new_status = not settings["notifications_enabled"]
    success = await Database.set_user_setting(user_id=user_id, setting="notifications_enabled", value=new_status)

    if success:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —ç–º–æ–¥–∑–∏
        notifications_text = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if new_status else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        updated_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language"),
                    InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="change_theme"),
                ],
                [
                    InlineKeyboardButton(text=notifications_text, callback_data="toggle_notifications"),
                ],
                [
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
                ]
            ]
        )
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {status_text}")
        logger.info(f"User (ID: {user_id}) {status_text} notifications.")
    else:
        await callback.message.answer("Failed to change notification settings. Please try again later.")
        logger.error(f"Failed to change notification settings for user (ID: {user_id}).")
        await callback.answer()

@router.callback_query(F.data == "cancel", StateFilter("*"))
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    await state.clear()
    await callback.message.delete()

    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await get_menu_keyboard())

    logger.info(f"User (ID: {callback.from_user.id}) canceled the action.")

    await callback.answer()

@router.message(Command("chat") | F.text == "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç")
async def cmd_chat(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç" –∏ –∫–æ–º–∞–Ω–¥—ã "/chat".
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞.
    """
    await state.set_state(FSMChatGPT.choosing_model)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞:", reply_markup=await get_choose_model_keyboard())
    logger.info(f"User (ID: {message.from_user.id}) is choosing a model with ChatGPT.")

@router.callback_query(F.data.startswith("choice_"), StateFilter(FSMChatGPT.choosing_model))
async def callback_choose_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    model = callback.data.split("_")[-1]
    user_id = callback.from_user.id

    success = await Database.set_user_setting(user_id=user_id, setting="chat_model", value=model)
    if success:
        model_full = "GPT4o" if model == "gpt4o" else "–°—Ü–µ–Ω–∞—Ä–Ω—ã–π"
        await callback.message.edit_text(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_full}.")
        logger.info(f"User (ID: {user_id}) changed chat model to {model}.")
    else:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to change chat model for user (ID: {user_id}).")

    await state.set_state(FSMChatGPT.waiting_for_message)
    await callback.answer()

@router.message(StateFilter(FSMChatGPT.waiting_for_message))
async def process_chat_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—â–µ–Ω–∏—è —Å ChatGPT.
    """
    user_message = message.text
    user_id = message.from_user.id

    await state.set_state(FSMChatGPT.processing_message)
    logger.info(f"Message received from user (ID: {user_id}): {user_message}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ChatGPT API
    # –ü—Ä–∏–º–µ—Ä:
    # gpt_response = await get_gpt_response(user_message)
    gpt_response = "This is a sample response from ChatGPT."

    await message.answer(gpt_response)
    logger.info(f"Response sent to user (ID: {user_id}): {gpt_response}")

    await state.clear()

@router.message(StateFilter(FSMChatGPT.processing_message))
async def fallback_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å :(")
    logger.error(f"Unexpected state while processing a message from user (ID: {message.from_user.id}).")
    await state.clear()
