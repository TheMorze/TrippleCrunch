import asyncio
import json

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from loguru import logger

from app.database.requests import Database
from app.FSM.fsm import FSMSettings, FSMModel
from aiogram.fsm.state import default_state
from app.keyboards.inline_keyboards import (
    get_settings_keyboard,
    get_hide_keyboard,
    get_choose_model_keyboard,
    get_approve_gpt4o_keyboard,
    get_approve_scenary_keyboard
)

from app.keyboards.reply_keyboards import (
    get_menu_keyboard
)

from app.service.helpers import get_gpt_response

from aiogram.types.reply_keyboard_markup import ReplyKeyboardMarkup

from app.lexicon.bot_lexicon import LEXICON_RU, LEXICON_EN

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ.
    """
    user_id = message.from_user.id
    username = message.from_user.username or ""
    fullname = message.from_user.full_name or ""

    user, created = await Database.add_user(user_id=user_id, username=username, fullname=fullname)
    if not created:
        welcome_text_ru = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{fullname}</b>!"
        welcome_text_en = f"Welcome back, <b>{fullname}</b>!"
    else:
        welcome_text_ru = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{fullname}</b>!"
        welcome_text_en = f"Welcome, <b>{fullname}</b>!"

    settings = await Database.get_user_settings(user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    if cur_lang == 'ru':
        await message.answer(LEXICON_RU['start'].format(hello=welcome_text_ru), reply_markup=await get_menu_keyboard(lang='ru'))
    else:
        await message.answer(LEXICON_EN['start'].format(hello=welcome_text_en), reply_markup=await get_menu_keyboard(lang='en'))

    logger.info(f"User {username} (ID: {user_id}) started the bot.")

@router.message(F.text == "ü§ñ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
@router.message(F.text == "ü§ñ Change Model")
async def change_model(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat –∏ —Å–æ–æ–±—â–µ–Ω–∏—è "ü§ñ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å".
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    await state.set_state(FSMModel.choosing_model)

    if cur_lang == 'ru':
        prompt = "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞:"
    else:
        prompt = "Choose a chat model:"

    await message.answer(prompt, reply_markup=await get_choose_model_keyboard(lang=cur_lang))
    logger.info(f"User (ID: {user_id}) is choosing a model with ChatGPT.")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@router.message(F.text == "‚öôÔ∏è Settings")
async def cmd_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)

    if not settings:
        if settings.get('language') == 'en':
            await message.answer("Your profile was not found. Please use /start to register.")
        else:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    cur_lang = settings.get('language', 'ru')

    if cur_lang == 'ru':
        settings_text = "<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
    else:
        settings_text = "<b>Your current settings:</b>\n\n"

    keyboard = await get_settings_keyboard(lang=cur_lang)

    await message.answer(settings_text, reply_markup=keyboard)
    logger.info(f"User (ID: {user_id}) requested settings.")

@router.callback_query(F.data == 'change_language')
async def change_language(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    await callback.message.delete()

    await state.set_state(FSMSettings.waiting_for_language)

    if cur_lang == 'ru':
        await Database.set_user_setting(user_id=user_id, setting='language', value='en')
        new_lang = 'en'
        response_text = "Language changed to EN."
        await callback.message.answer("<b>Your current settings:</b>\n\n", reply_markup=await get_settings_keyboard(lang='en'))
        await callback.message.answer("Settings have been changed", reply_markup=await get_menu_keyboard(lang='en'))
    else:
        await Database.set_user_setting(user_id=user_id, setting='language', value='ru')
        new_lang = 'ru'
        response_text = "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ RU."
        await callback.message.answer("<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n", reply_markup=await get_settings_keyboard(lang='ru'))
        await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=await get_menu_keyboard(lang='ru'))

    await callback.answer(text=response_text)
    logger.info(f"User (ID: {user_id}) changed language to {new_lang.upper()}.")

@router.callback_query(F.data == "hide")
async def callback_hide(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)

    if state.get_state() not in (FSMModel.waiting_for_message_gpt4o, FSMModel.waiting_for_message_scenary):
        await state.clear()

    await callback.message.delete()

    logger.info(f"User (ID: {user_id}) hided the action.")

    await callback.answer()

@router.callback_query(F.data.startswith("choice_"), StateFilter(FSMModel.choosing_model))
async def callback_choose_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    model = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    if model == "gpt4o":
        if cur_lang == 'ru':
            text = LEXICON_RU['gpt4o_choice']
        else:
            text = LEXICON_EN['gpt4o_choice']
        keyboard = await get_approve_gpt4o_keyboard(lang=cur_lang)
    elif model == "scenary":
        if cur_lang == 'ru':
            text = LEXICON_RU['scenary_choice']
        else:
            text = LEXICON_EN['scenary_choice']
        keyboard = await get_approve_scenary_keyboard(lang=cur_lang)
    else:
        if cur_lang == 'ru':
            text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å."
        else:
            text = "Unknown model."
        keyboard = InlineKeyboardMarkup()

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
    logger.info(f"User (ID: {user_id}) is approving model {model}.")

@router.callback_query(F.data.startswith("approve"), StateFilter(FSMModel.choosing_model))
async def callback_approve_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    model = callback.data.split("_")[-1]
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    success = await Database.set_user_setting(user_id=user_id, setting="chat_model", value=model)
    if success:
        if model == "gpt4o":
            if cur_lang == 'ru':
                text = "–ú–æ–¥–µ–ª—å GPT4o —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞."
            else:
                text = "GPT4o model has been successfully selected."
        elif model == "scenary":
            if cur_lang == 'ru':
                text = "–†–µ–∂–∏–º ¬´—Å—Ü–µ–Ω–∞—Ä–Ω—ã–π¬ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω."
            else:
                text = "Scenary mode has been successfully selected."
        else:
            if cur_lang == 'ru':
                text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å."
            else:
                text = "Unknown model."

        await callback.message.edit_text(text)
        logger.info(f"User (ID: {user_id}) changed chat model to {model}.")
    else:
        if cur_lang == 'ru':
            text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            text = "Failed to change the model. Please try again later."
        await callback.message.edit_text(text)
        logger.error(f"Failed to change chat model for user (ID: {user_id}).")

    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "refuse")
async def callback_refuse_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    user_id = callback.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    await state.clear()

    if cur_lang == 'ru':
        text = "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω."
    else:
        text = "Model selection canceled."

    await callback.message.edit_text(text)
    await callback.answer()
    logger.info(f"User (ID: {user_id}) refused to choose a model.")

@router.message(Command("chat"))
@router.message(F.text == "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç")
@router.message(F.text == "üó®Ô∏è Start Chat")
async def cmd_chat_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç" –∏ –∫–æ–º–∞–Ω–¥—ã "/chat".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatGPT.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    model = await Database.get_user_model(user_id=user_id)

    if model == "gpt4o":
        full_model = "GPT4o"
        await state.set_state(FSMModel.waiting_for_message_gpt4o)
    elif model == "scenary":
        full_model = "Scenary"
        await state.set_state(FSMModel.waiting_for_message_scenary)
    else:
        # Default model
        full_model = "GPT4o"
        await state.set_state(FSMModel.waiting_for_message_gpt4o)

    if cur_lang == 'ru':
        prompt = f"–í—ã —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ: {full_model}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    else:
        prompt = f"You are now using: {full_model}\n\nEnter your message:"

    await message.answer(prompt, reply_markup=await get_hide_keyboard(lang=cur_lang))

    logger.info(f"User (ID: {user_id}) is starting a chat with ChatGPT.")

@router.message(StateFilter(FSMModel.waiting_for_message_gpt4o))
async def process_gpt4o_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—â–µ–Ω–∏—è —Å GPT4o.
    """
    user_message = message.text
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    logger.info(f"Message received from user (ID: {user_id}): {user_message}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ChatGPT API
    # –ü—Ä–∏–º–µ—Ä:
    # gpt_response = await get_gpt_response(user_message)
    gpt_response = await get_gpt_response(user_message)

    await message.answer(gpt_response)
    logger.info(f"Response sent to user (ID: {user_id}): {gpt_response}")


@router.message(StateFilter(FSMModel.waiting_for_message_scenary))
async def process_scenary_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—â–µ–Ω–∏—è —Å Scenary.
    """

    # –ó–∞–≥—Ä—É–∑–∫–∞ JSON-—Ñ–∞–π–ª–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
    with open('app/lexicon/replies.json', 'r', encoding='utf-8') as f:
        RESPONSES = json.load(f)

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    # –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Ö –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
    RESPONSE_LIST = []
    for response_key, response_value in RESPONSES.items():
        keywords = [kw.lower() for kw in response_value.get('keywords', [])]
        reply = response_value.get('reply', '')
        RESPONSE_LIST.append((keywords, reply))

    response = None

    # –ï—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ RESPONSES —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ —è–∑—ã–∫–∞–º
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ JSON –Ω–∞ —Ä—É—Å—Å–∫–æ–º

    # –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for keywords, reply in RESPONSE_LIST:
        for keyword in keywords:
            if keyword.lower() in message.text.lower():
                response = reply
                logger.info(f"Keyword '{keyword}' matched. Sending reply: {reply}")
                break  # –í—ã—Ö–æ–¥ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞
        if response:
            break  # –í—ã—Ö–æ–¥ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç
    else:
        response = "–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å :("

    user_message = message.text
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    logger.info(f"Message received from user (ID: {user_id}): {user_message}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Scenary API –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–æ–º
    # –ü—Ä–∏–º–µ—Ä:
    # scenary_response = await get_scenary_response(user_message)
    scenary_response = "This is a sample response from Scenary." if cur_lang == 'en' else "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –æ—Ç Scenary."

    await message.answer(response)
    logger.info(f"Response sent to user (ID: {user_id}): {scenary_response}")


@router.message(StateFilter(FSMModel.scenary_processing_message))
async def fallback_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)
    if settings:
        cur_lang = settings.get('language', 'ru')
    else:
        cur_lang = 'ru'  # Default language

    if cur_lang == 'ru':
        fallback_text = "–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å :("
    else:
        fallback_text = "I don't know how to respond to that :("

    await message.answer(fallback_text)
    logger.error(f"Unexpected state while processing a message from user (ID: {user_id}).")
    await state.clear()
