import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from loguru import logger

from app.database.requests import Database
from app.FSM.fsm import FSMSettings, FSMModel
from aiogram.fsm.state import default_state
from app.keyboards.inline_keyboards import (
    get_settings_keyboard,
    get_cancel_keyboard,
    get_choose_model_keyboard,
    get_approve_gpt4o_keyboard,
    get_approve_scenary_keyboard
)

from app.keyboards.reply_keyboards import (
    get_menu_keyboard
)

from aiogram.types.reply_keyboard_markup import ReplyKeyboardMarkup

from app.lexicon.bot_lexicon import LEXICON_RU


router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ.
    """
    user_id = message.from_user.id
    username = message.from_user.username or ""
    fullname = message.from_user.full_name or ""

    user, created = await Database.add_user(user_id=user_id, username=username, fullname=fullname)
    if not created:
        welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{fullname}</b>!"
    else:
        welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{fullname}</b>!"


    cur_lang = (await Database.get_user_settings(user_id))['language']
    await message.answer(LEXICON_RU['start'].format(hello=welcome_text), reply_markup=await get_menu_keyboard(lang=cur_lang))
    logger.info(f"User {username} (ID: {user_id}) started the bot.")

@router.message(Command("chat"))
@router.message(F.text == "ü§ñ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
async def cmd_chat(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç" –∏ –∫–æ–º–∞–Ω–¥—ã "/chat".
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞.
    """

    await state.set_state(FSMModel.choosing_model)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞:", reply_markup=await get_choose_model_keyboard())
    logger.info(f"User (ID: {message.from_user.id}) is choosing a model with ChatGPT.")



@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    settings = await Database.get_user_settings(user_id=user_id)

    if not settings:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    settings_text = (
        f"<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
    )

    keyboard = await get_settings_keyboard()

    await message.answer(settings_text, reply_markup=keyboard)
    logger.info(f"User (ID: {user_id}) requested settings.")

@router.callback_query(F.data == 'change_language')
async def change_language(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.set_state(FSMSettings.waiting_for_language)
    cur_lang = (await Database.get_user_settings(user_id=callback.from_user.id))['language']
    if cur_lang == 'ru':
        await Database.set_user_setting(user_id=callback.from_user.id, setting='language', value='en')
        new_lang = 'en'
    elif cur_lang == 'en':
        await Database.set_user_setting(user_id=callback.from_user.id, setting='language', value='ru')
        new_lang = 'ru'

    await callback.answer(text=f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_lang.upper()}.")


@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    await state.clear()
    await callback.message.delete()

    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=await get_menu_keyboard())

    logger.info(f"User (ID: {callback.from_user.id}) canceled the action.")

    await callback.answer()

@router.callback_query(F.data.startswith("choice_"), StateFilter(FSMModel.choosing_model))
async def callback_choose_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    model = callback.data.split("_")[-1]

    if model == "gpt4o":
        await callback.message.edit_text("–ú–æ–¥–µ–ª—å GPT4o. –≠—Ç–æ –∫—Ä—É—Ç–∞—è –∏ –¥–æ—Ä–æ–≥–∞—è –º–æ–¥–µ–ª—å!\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ—ë –≤—ã–±—Ä–∞—Ç—å?",
                                         reply_markup=await get_approve_gpt4o_keyboard())
    elif model == "scenary":
        await callback.message.edit_text("–†–µ–∂–∏–º ¬´—Å—Ü–µ–Ω–∞—Ä–Ω—ã–π¬ª. –ü–æ–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –ú–ò–°–ò–°! –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ—ë –≤—ã–±—Ä–∞—Ç—å?\n(–ø—Å, —ç—Ç–æ –ø–∏—Å–∞–ª –¥–∞–Ω—è, –æ–Ω–æ —Ç–æ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç –±—Ä–∞—Ç)",
                                         reply_markup=await get_approve_scenary_keyboard())

@router.callback_query(F.data.startswith("approve"), StateFilter(FSMModel.choosing_model))
async def callback_approve_model(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞.
    """
    model = callback.data.split("_")[-1]
    user_id = callback.from_user.id

    success = await Database.set_user_setting(user_id=user_id, setting="chat_model", value=model)
    if success:
        if model == "gpt4o":
            await callback.message.edit_text("–ú–æ–¥–µ–ª—å GPT4o —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞.")
        elif model == "scenary":
            await callback.message.edit_text("–†–µ–∂–∏–º ¬´—Å—Ü–µ–Ω–∞—Ä–Ω—ã–π¬ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω.")

        logger.info(f"User (ID: {user_id}) changed chat model to {model}.")
    else:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to change chat model for user (ID: {user_id}).")

    await state.clear()
    await callback.answer()

@router.message(Command("chat"))
@router.message(F.text == "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç")
async def cmd_chat(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "üó®Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatGPT.
    """

    model = await Database.get_user_model(user_id=message.from_user.id)

    full_model = "GPT4o" if model == "gpt4o" else "–°—Ü–µ–Ω–∞—Ä–Ω—ã–π"

    if model == "gpt4o":
        await state.set_state(FSMModel.waiting_for_message_gpt4o)
    elif model == "scenary":
        await state.set_state(FSMModel.waiting_for_message_scenary)

    await message.answer(f"–í—ã —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ: {full_model}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=await get_cancel_keyboard())


    logger.info(f"User (ID: {message.from_user.id}) is starting a chat with ChatGPT.")

@router.message(StateFilter(FSMModel.waiting_for_message_gpt4o))
async def process_gpt4o_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—â–µ–Ω–∏—è —Å ChatGPT.
    """
    user_message = message.text
    user_id = message.from_user.id

    await state.set_state(FSMModel.gpt4o_processing_message)
    logger.info(f"Message received from user (ID: {user_id}): {user_message}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ChatGPT API
    # –ü—Ä–∏–º–µ—Ä:
    # gpt_response = await get_gpt_response(user_message)
    gpt_response = "This is a sample response from ChatGPT."

    await message.answer(gpt_response)
    logger.info(f"Response sent to user (ID: {user_id}): {gpt_response}")

    await state.clear()

@router.message(StateFilter(FSMModel.waiting_for_message_scenary))
async def process_scenary_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—â–µ–Ω–∏—è —Å ChatGPT.
    """
    user_message = message.text
    user_id = message.from_user.id

    await state.set_state(FSMModel.scenary_processing_message)
    logger.info(f"Message received from user (ID: {user_id}): {user_message}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ChatGPT API
    # –ü—Ä–∏–º–µ—Ä:
    # gpt_response = await get_gpt_response(user_message)
    scenary_response = "This is a sample response from Scenary."

    await message.answer(scenary_response)
    logger.info(f"Response sent to user (ID: {user_id}): {scenary_response}")

    await state.clear()

@router.message(StateFilter(FSMModel.scenary_processing_message))
async def fallback_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å :(")
    logger.error(f"Unexpected state while processing a message from user (ID: {message.from_user.id}).")
    await state.clear()
