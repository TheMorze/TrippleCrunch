from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

async def get_settings_keyboard(lang: str = 'ru', is_admin = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π —è–∑—ã–∫–∞.

    :param lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('ru' –∏–ª–∏ 'en').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    if lang == 'ru':
        language_button_text = "–Ø–∑—ã–∫: üá∑üá∫ –†—É—Å—Å–∫–∏–π"
        admin_panel = "–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        hide_button_text = "–°–∫—Ä—ã—Ç—å"
    else:
        language_button_text = "Language: üá¨üáß English"
        admin_panel = "Enter Admin Panel"
        hide_button_text = "Hide"

    if is_admin:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=language_button_text, callback_data="change_language")
                ],
                [
                    InlineKeyboardButton(text=admin_panel, callback_data="enter_admin_panel")],
                [
                    InlineKeyboardButton(text=hide_button_text, callback_data="hide")
                ]
            ]
        )
        return keyboard

    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=language_button_text, callback_data="change_language"),
                ],
                [
                    InlineKeyboardButton(text=hide_button_text, callback_data="hide")
                ]
            ]
        )

    return keyboard


async def get_choose_model_keyboard(gpt4o=True, scenary=True, lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.

    :param lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('ru' –∏–ª–∏ 'en').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.
    """
    if lang == 'ru':
        gpt4o_text = "üöÄ GPT4o"
        scenary_text = "üëæ –°—Ü–µ–Ω–∞—Ä–Ω–∞—è"
        hide_text = "–°–∫—Ä—ã—Ç—å"
    else:
        gpt4o_text = "üöÄ GPT4o"
        scenary_text = "üëæ Scenary"
        hide_text = "Hide"

    models = []
    if gpt4o:
        models.append(InlineKeyboardButton(text=gpt4o_text, callback_data="choice_gpt4o"))
    if scenary:
        models.append(InlineKeyboardButton(text=scenary_text, callback_data="choice_scenary"))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            models,
            [
                InlineKeyboardButton(text=hide_text, callback_data="hide")
            ]
        ]
    )
    return keyboard


async def get_approve_gpt4o_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ GPT4o.

    :param lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('ru' –∏–ª–∏ 'en').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    if lang == 'ru':
        yes_text = "‚úÖ –î–∞"
        no_text = "‚ùå –ù–µ—Ç"
    else:
        yes_text = "‚úÖ Yes"
        no_text = "‚ùå No"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=yes_text, callback_data="approve_gpt4o"),
                InlineKeyboardButton(text=no_text, callback_data="refuse")
            ]
        ]
    )
    return keyboard


async def get_approve_scenary_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –°—Ü–µ–Ω–∞—Ä–Ω—ã–π.

    :param lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('ru' –∏–ª–∏ 'en').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    if lang == 'ru':
        yes_text = "‚úÖ –î–∞"
        no_text = "‚ùå –ù–µ—Ç"
    else:
        yes_text = "‚úÖ Yes"
        no_text = "‚ùå No"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=yes_text, callback_data="approve_scenary"),
                InlineKeyboardButton(text=no_text, callback_data="hide")
            ]
        ]
    )
    return keyboard


async def get_hide_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è.

    :param lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('ru' –∏–ª–∏ 'en').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã.
    """
    if lang == 'ru':
        hide_text = "–°–∫—Ä—ã—Ç—å"
    else:
        hide_text = "Hide"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=hide_text, callback_data="hide")
            ]
        ]
    )
    return keyboard

async def get_admin_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    :param lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('ru' –∏–ª–∏ 'en').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    if lang == 'ru':
        find_user = "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        hide_text = "–°–∫—Ä—ã—Ç—å"
    else:
        find_user = "Find User"
        hide_text = "Hide"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=find_user, callback_data="find_user")
            ],

            [
                InlineKeyboardButton(text=hide_text, callback_data="hide")
            ]
        ]
    )
    return keyboard

async def get_admin_user_editing_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    :param lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('ru' –∏–ª–∏ 'en').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if lang == 'ru':
        change_model = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª—è–º"
        change_token_balance = "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤"
        give_ban = "–í—ã–¥–∞—Ç—å –±–∞–Ω"
        hide_text = "–°–∫—Ä—ã—Ç—å"
    else:
        change_model = "Change access setting to the models"
        change_token_balance = "Change token balance"
        give_ban = "Give ban"
        hide_text = "Hide"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=change_model, callback_data="change_user_model")
            ],

            [
                InlineKeyboardButton(text=change_token_balance, callback_data="change_user_token_balance")
            ],

            [
                InlineKeyboardButton(text=give_ban, callback_data="give_ban")
            ],

            [
                InlineKeyboardButton(text=hide_text, callback_data="hide")
            ]
        ]
    )
    return keyboard

async def get_user_model_access_keyboard(gpt = False, scenary = False, lang: str = 'ru') -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —á–∞—Ç–∞.

    :param lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('ru' –∏–ª–∏ 'en').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.
    """
    if lang == 'ru':
        if gpt:
            gpt4o_text = "‚úÖ GPT4o"
        else:
            gpt4o_text = "‚ùå GPT4o"

        if scenary:
            scenary_text = "‚úÖ –°—Ü–µ–Ω–∞—Ä–Ω—ã–π"
        else:
            scenary_text = "‚ùå –°—Ü–µ–Ω–∞—Ä–Ω—ã–π"

        hide_text = "–°–∫—Ä—ã—Ç—å"
    else:
        if gpt:
            gpt4o_text = "‚úÖ GPT4o"
        else:
            gpt4o_text = "‚ùå GPT4o"

        if scenary:
            scenary_text = "‚úÖ Scenary"
        else:
            scenary_text = "‚ùå Scenary"

        hide_text = "Hide"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=gpt4o_text, callback_data="access_gpt4o"),
                InlineKeyboardButton(text=scenary_text, callback_data="access_scenary"),
            ],
            [
                InlineKeyboardButton(text=hide_text, callback_data="hide")
            ]
        ]
    )
    return keyboard
